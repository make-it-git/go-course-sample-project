// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: api/proto/service.proto

package ride_order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RideClient is the client API for Ride service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RideClient interface {
	TrackOrder(ctx context.Context, opts ...grpc.CallOption) (Ride_TrackOrderClient, error)
	GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*GetTrackResponse, error)
}

type rideClient struct {
	cc grpc.ClientConnInterface
}

func NewRideClient(cc grpc.ClientConnInterface) RideClient {
	return &rideClient{cc}
}

func (c *rideClient) TrackOrder(ctx context.Context, opts ...grpc.CallOption) (Ride_TrackOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ride_ServiceDesc.Streams[0], "/Ride/TrackOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &rideTrackOrderClient{stream}
	return x, nil
}

type Ride_TrackOrderClient interface {
	Send(*TrackOrderRequest) error
	CloseAndRecv() (*TrackOrderResponse, error)
	grpc.ClientStream
}

type rideTrackOrderClient struct {
	grpc.ClientStream
}

func (x *rideTrackOrderClient) Send(m *TrackOrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rideTrackOrderClient) CloseAndRecv() (*TrackOrderResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TrackOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rideClient) GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*GetTrackResponse, error) {
	out := new(GetTrackResponse)
	err := c.cc.Invoke(ctx, "/Ride/GetTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RideServer is the server API for Ride service.
// All implementations must embed UnimplementedRideServer
// for forward compatibility
type RideServer interface {
	TrackOrder(Ride_TrackOrderServer) error
	GetTrack(context.Context, *GetTrackRequest) (*GetTrackResponse, error)
	mustEmbedUnimplementedRideServer()
}

// UnimplementedRideServer must be embedded to have forward compatible implementations.
type UnimplementedRideServer struct {
}

func (UnimplementedRideServer) TrackOrder(Ride_TrackOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackOrder not implemented")
}
func (UnimplementedRideServer) GetTrack(context.Context, *GetTrackRequest) (*GetTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedRideServer) mustEmbedUnimplementedRideServer() {}

// UnsafeRideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RideServer will
// result in compilation errors.
type UnsafeRideServer interface {
	mustEmbedUnimplementedRideServer()
}

func RegisterRideServer(s grpc.ServiceRegistrar, srv RideServer) {
	s.RegisterService(&Ride_ServiceDesc, srv)
}

func _Ride_TrackOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RideServer).TrackOrder(&rideTrackOrderServer{stream})
}

type Ride_TrackOrderServer interface {
	SendAndClose(*TrackOrderResponse) error
	Recv() (*TrackOrderRequest, error)
	grpc.ServerStream
}

type rideTrackOrderServer struct {
	grpc.ServerStream
}

func (x *rideTrackOrderServer) SendAndClose(m *TrackOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rideTrackOrderServer) Recv() (*TrackOrderRequest, error) {
	m := new(TrackOrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ride_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ride/GetTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServer).GetTrack(ctx, req.(*GetTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ride_ServiceDesc is the grpc.ServiceDesc for Ride service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ride_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ride",
	HandlerType: (*RideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrack",
			Handler:    _Ride_GetTrack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackOrder",
			Handler:       _Ride_TrackOrder_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/service.proto",
}
